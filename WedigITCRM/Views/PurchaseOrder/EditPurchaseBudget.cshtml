@model PurchaseBudgetEditViewModel

<div class="formcontainer">
    <div class="tableheadline">
        <div class="row">
            <div class="col-2">
                Indkøbsbudget
            </div>
            <div class="col-2">

            </div>
            <div class="col-2">
                @Model.Description
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-4">

        </div>
        <div class="col-8">
            <!-- Modal -->
            <div class="modal fade" id="myModal" role="dialog">
                <div class="modal-dialog modal-lg">
                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal"><i style="color : #17a2b8;" class="fa fa fa-window-close fa-2x fa-fw"></i></button>
                            <div style="color : #17a2b8;" class="modal-title tableheadline">Ordrelinje</div>
                        </div>
                        <div class="modal-body">
                            <div class="row">
                                <div class="col-2">
                                    <div id="quantitytorderedpreviousperiod">

                                    </div>
                                </div>
                                <div class="col-2">
                                    <div id="lastperiodstartdate">

                                    </div>
                                </div>
                                <div class="col-2">
                                    <div id="lastperiodenddate">

                                    </div>
                                </div>
                                <div class="col-2">
                                    <div id="budgetlineidhold">

                                    </div>
                                </div>
                            </div>

                            <div class="modal-footer">                                
                                <button type="button" id="buttontransferamount" class="btn btn-info btn-lg">Overfør</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>





    <div class="row">
        <div class="col-12">
            <form id="searchForm" asp-controller="PurchaseOrder" asp-action="EditPurchaseBudget" method="get">
                <input asp-for="@Model.PurchaseBudgetId" hidden id="PurchaseBudgetId" />
                <div class="form-row">
                    <div class="col-2">
                        <div class="input-select-room-for-icon">
                            <label asp-for="@Model.SearchByStockItemName">Vare</label>
                            <input asp-for="@Model.SearchByStockItemName" id="searchbyitemname" />
                        </div>
                        <div class="icon-beside-input-select">
                            <i id="resetsearchbyitemname" class="fa fa-times"></i>
                        </div>
                    </div>
                    <div class="col-2">
                        <div class="input-select-room-for-icon">
                            <label asp-for="@Model.SearchByStockItemNumber">Varenummer</label>
                            <input asp-for="@Model.SearchByStockItemNumber" id="searchbyitemnumber" />
                        </div>
                        <div class="icon-beside-input-select">
                            <i id="resetsearchbyitemnumber" class="fa fa-times"></i>
                        </div>
                    </div>
                    <div class="col-2">
                        <div class="input-select-room-for-icon">
                            <label asp-for="@Model.VendorId">Leverandør</label>
                            <select asp-for="@Model.VendorId" asp-items="@Model.SearchByVendor" id="searchbyvendor" class="custom-select"></select>
                        </div>
                        <div class="icon-beside-input-select">
                            <i id="resetsearchbyvendor" class="fa fa-times"></i>
                        </div>
                    </div>
                    <div class="col-2">
                        <div class="input-select-room-for-icon">
                            <label asp-for="@Model.category1Id">Kategori 1</label>
                            <select asp-for="@Model.category1Id" asp-items="@Model.SearchByCategory1" id="searchbycategory1" class="custom-select"></select>
                        </div>
                        <div class="icon-beside-input-select">
                            <i id="resetsearchbycategory1" class="fa fa-times"></i>
                        </div>
                    </div>
                    <div class="col-2">
                        <div class="input-select-room-for-icon">
                            <label asp-for="@Model.category2Id">Kategori 2</label>
                            <select asp-for="@Model.category2Id" asp-items="@Model.SearchByCategory2" id="searchbycategory2" class="custom-select"></select>
                        </div>
                        <div class="icon-beside-input-select">
                            <i id="resetsearchbycategory2" class="fa fa-times"></i>
                        </div>
                    </div>
                    <div class="col-2">
                        <div class="input-select-room-for-icon">
                            <label asp-for="@Model.category3Id">Kategori 3</label>
                            <select asp-for="@Model.category3Id" asp-items="@Model.SearchByCategory3" id="searchbycategory3" class="custom-select"></select>
                        </div>
                        <div class="icon-beside-input-select">
                            <i id="resetsearchbycategory3" class="fa fa-times"></i>
                        </div>
                    </div>
                </div>
                <br />
                <br />
            </form>
        </div>
    </div>




    <div class="row">
        <div class="col-4">
            <div class="itemlistfixedpos">
                @if (Model != null)
                {
                    @foreach (var stockItem in Model.StockItems)
                    {

                        <div class="row itemline" id="@stockItem.Id" draggable="true" ondragstart="dragStockItemLine(event)">
                            <div class="col-5">@stockItem.ItemName</div>
                            <div class="col-5">@stockItem.ItemNumber</div>
                            <div class="col-1">@stockItem.Unit</div>
                        </div>

                    }
                }
            </div>
        </div>

        <div class="col-8">
            @if (Model != null)
            {
                @foreach (var periodLine in Model.PeriodLines)
                {

                    <div id="@periodLine.Id" class="periodDiv">
                        <div class="row">
                            <div class="col-12 periodcontainer" ondrop="drop(event)" ondragover="allowDrop(event)">
                                <div class="row">
                                    <div class="col-2">@periodLine.displayPeriodStartText</div>
                                    <div class="col-2">@periodLine.displayPeriodEndText</div>
                                    <div class="col-2">@periodLine.displayWeekNumber</div>
                                </div>
                            </div>
                        </div>
                        <div class="row budgetlineheaders">
                            <div class="col-2 budgetlineheaders-align-right">Antal</div>
                            <div class="col-2 budgetlineheaders-align-left">Vare</div>
                            <div class="col-2 budgetlineheaders-align-left">Varenummer</div>
                            <div class="col-1 budgetlineheaders-align-left">Enheder</div>
                            <div class="col-2 budgetlineheaders-align-right">Kostpris</div>
                            <div class="col-2 budgetlineheaders-align-right">Total</div>
                            <div class="col-1"></div>
                        </div>
                        <div class="row">
                            <div class="col-12 budgetlinescontainer">

                            </div>
                        </div>
                    </div>

                }
            }


        </div>
    </div>
</div>



@section Scripts {
    <script>
        $(document).ready(function () {


            var budgetLines = @Html.Raw(Json.Serialize(Model.BudgetLines.ToArray()));

            for (var i = 0; i < budgetLines.length; i++) {
                var htmlStr;

                htmlStr = '<div class="row budgetitemline" id="' + budgetLines[i].id + '" draggable="true" ondragstart="dragPeriodLine(event)">';

                    htmlStr = htmlStr + '<div class="col-2 myright"><input type="text" name="Quantity" class="periodline-input-field" value="' + budgetLines[i].quantityToOrder + '" /></div>';
                    htmlStr = htmlStr + '<div class="col-2">' + budgetLines[i].ourItemName + '</div>';
                    htmlStr = htmlStr + '<div class="col-2">' + budgetLines[i].ourItemNumber + '</div>';
                    htmlStr = htmlStr + '<div class="col-1">' + budgetLines[i].ourItemUnit + '</div>';
                    htmlStr = htmlStr + '<div class="col-2 myright">' + budgetLines[i].ourCostPrice + '</div>';
                    htmlStr = htmlStr + '<div class="col-2 linetotalamount myright">' + budgetLines[i].lineTotalAmount + '</div>';
                    htmlStr = htmlStr + '<div class="col-1 show-quantity-sold">' + '<i style="color : #17a2b8;" class="fa fa-envelope-open fa-fw"></i>' + '<i style="color : #17a2b8;" class="fa fa-trash fa-fw removebudgetline"></i>' + '</div>';
                    htmlStr = htmlStr + '<input type="text" hidden name="periodeDivId" value="' + budgetLines[i].periodLineId + '" />';
                    htmlStr = htmlStr + '<input type="text" hidden name="stockItemId" value="' + budgetLines[i].stockItemId + '" />';

                    htmlStr = htmlStr + '<input type="text" hidden name="quantitysoldpreviousperiod" value="' + budgetLines[i].quantitySold + '" />';
                    htmlStr = htmlStr + '<input type="text" hidden name="startdatepreviousperiod" value="' + budgetLines[i].quantitySoldPeriodStartDate + '" />';
                    htmlStr = htmlStr + '<input type="text" hidden name="enddatepreviousperiod" value="' + budgetLines[i].quantitySoldPeriodEndDate + '" />';

                htmlStr = htmlStr + '</div>';



                var newDivNode = document.createElement("div");
                newDivNode.innerHTML = htmlStr;

                var periodeDiv = document.getElementById(budgetLines[i].periodLineId);

                var targetCols = periodeDiv.getElementsByClassName("budgetlinescontainer");

                targetCols[0].appendChild(newDivNode);
            }

            $(document).on('change', '.periodline-input-field', function () {
                var quantity = $(this).val();

                if (isNaN(quantity)) {
                    return
                }

                var budgetLineId = $(this).parent().parent().attr("id");

                updateBudgetLineQuantity(budgetLineId, quantity);
            });


            $('#searchbyitemname').bind('change', function () {
                $("#searchForm").submit();
            });

            $('#searchbyitemnumber').bind('change', function () {
                $("#searchForm").submit();
            });

            $('#searchbyvendor').bind('change', function () {
                $("#searchForm").submit();
            });

            $('#searchbycategory1').bind('change', function () {
                $("#searchForm").submit();
            });

            $('#searchbycategory2').bind('change', function () {
                $("#searchForm").submit();
            });

            $('#searchbycategory3').bind('change', function () {
                $("#searchForm").submit();
            });


            $(document).on("click", ".removebudgetline", function (event) {

                var budgetLineId = $(this).parent().parent().attr("id");

                deleteBudgetLine(budgetLineId)


                event.stopImmediatePropagation();
            });



                $(document).on("click", ".XXXXXXXXXXXXXXXXXXX-fa-envelope-open", function (event) {
                var tmpdiv1 = $(this).parent();
                var tmpdiv2 = tmpdiv1.parent();
                var tmpdiv3 = tmpdiv2.parent();

                var containingDiv = tmpdiv2.parent();

                //var quantitySoldDiv = containingDiv.find("[class='quantitysolddiv']");

                var quantitySoldDivList = containingDiv[0].getElementsByClassName("quantitysolddiv");
                var quantitySoldDiv = quantitySoldDivList[0];
                 //var quantitySoldDiv = document.getElementsByClassName("quantitysolddiv");

                //if (quantitySoldDiv.style.display === "none") {
                //    quantitySoldDiv.style.display = "block";
                //} else {
                //    quantitySoldDiv.style.display = "none";
                //}

                if (window.getComputedStyle(quantitySoldDiv).visibility === "hidden") {
                    quantitySoldDiv.style.visibility = "visible";
                }
                else {
                    quantitySoldDiv.style.visibility = "hidden";
                }

                event.stopImmediatePropagation();
            });

            $(document).on("click", ".fa-times", function (event) {
                var resetFieldId = $(this).attr("id");
                switch (resetFieldId) {
                    case "resetsearchbyitemname":
                        $('#searchbyitemname').val("");
                        break;
                    case "resetsearchbyitemnumber":
                        $('#searchbyitemnumber').val("");
                        break;
                    case "resetsearchbyvendor":
                        $('#searchbyvendor').val("0");
                        break;
                    case "resetsearchbycategory1":
                        $('#searchbycategory1').val("");
                        break;
                    case "resetsearchbycategory2":
                        $('#searchbycategory2').val("");
                        break;
                    case "resetsearchbycategory3":
                        $('#searchbycategory3').val("");
                        break;
                }
                $("#searchForm").submit();
                event.stopImmediatePropagation();
            });


            $(document).on("click", ".fa-envelope-open", function (event) {

                var budgetLineDiv = $(this).parent().parent();

                document.getElementById("budgetlineidhold").innerHTML = budgetLineDiv[0].getAttribute("id");

                var inputElements = budgetLineDiv[0].querySelectorAll("input");

                for (var i = 0; i < inputElements.length; i++) {                   

                    if (inputElements[i].name == "quantitysoldpreviousperiod") {                   
                        document.getElementById("quantitytorderedpreviousperiod").innerHTML = inputElements[i].value;
                    }
                    if (inputElements[i].name == "startdatepreviousperiod") {
                        document.getElementById("lastperiodstartdate").innerHTML = inputElements[i].value;
                    }

                    if (inputElements[i].name == "enddatepreviousperiod") {                    
                        document.getElementById("lastperiodenddate").innerHTML = inputElements[i].value;
                    }
                }

                $("#myModal").modal('show');

            });

            $('#buttontransferamount').bind('click', function () {


                var budgetLineId = document.getElementById("budgetlineidhold").innerHTML;
                var budgetLineDiv = document.getElementById(budgetLineId);

                var transferredQuantity = document.getElementById("quantitytorderedpreviousperiod").innerHTML;

                var inputElements = budgetLineDiv.querySelectorAll("input");
                for (var i = 0; i < inputElements.length; i++) {
                    if (inputElements[i].name == "Quantity") {
                        inputElements[i].value = transferredQuantity;
                        updateBudgetLineQuantity(budgetLineId, transferredQuantity);
                    }
                }

                $("#myModal").modal('hide');
            });



        });


        function allowDrop(ev) {
            ev.preventDefault();
        }

        function dragStockItemLine(ev) {
             ev.dataTransfer.setData("text", ev.target.id + "|" + "1");
        }

        function dragPeriodLine(ev) {
            ev.dataTransfer.setData("text", ev.target.id + "|" + "0");
        }

        function drop(ev) {

            if (ev.target.classList.contains("periodcontainer") || ev.target.parentElement.classList.contains("periodcontainer") || ev.target.parentElement.parentElement.classList.contains("periodcontainer")) {

            }
            else {
                return;
            }

            ev.preventDefault();

            var data = ev.dataTransfer.getData("text");
            var dataArray = data.split("|");

            var currentElement = ev.target;
            while (currentElement != null) {
                if (currentElement.classList.contains('periodDiv')) {
                    break;
                }
                currentElement = currentElement.parentElement;
            }

            var newPeriodLineId = currentElement.getAttribute("id");

            if (dataArray[1] == "1") {   // drag and  drop a item line to budget line.

                var stockItemId = dataArray[0];

                createBudgetLineFromItemLine(stockItemId, newPeriodLineId);
            }

            if (dataArray[1] == "0") {  // drag and  drop a budget line line to new budget line.
                if (ev.ctrlKey) {
                    var sourceBudgetLineId = dataArray[0];


                    createBudgetLineFromBudgetLine(sourceBudgetLineId, newPeriodLineId);
                    return;
                }
                else {  // drag and  drop a budget line i.e move

                    var sourceBudgetLineId = dataArray[0];

                    updateBudgetLinePeriod(sourceBudgetLineId, newPeriodLineId)
                }
            }
        }

        function createBudgetLineFromItemLine(stockItemId, periodLineId) {

            $.ajax({
                type: "POST",
                url: "/purchaseorder/createBudgetLineFromItemLine",
                data: {
                    stockItemId: stockItemId,
                    periodLineId: periodLineId,
                    purchaseBudgetId: $('#PurchaseBudgetId').val()
                },
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                dataType: "json",
                success: function (result) {

                    var sourceItemLineDiv = document.getElementById(result.stockItemId);
                    sourceItemLineDiv.remove();

                    var htmlStr;

                    htmlStr = '<div class="row budgetitemline" id="' + result.id + '" draggable="true" ondragstart="dragPeriodLine(event)">';
                    htmlStr = htmlStr + ' <div class="col-2  myright"><input type="text" name="Quantity" class="periodline-input-field" value="' + result.quantityToOrder + '" /></div>';
                    htmlStr = htmlStr + '<div class="col-2">' + result.ourItemName + '</div>';
                    htmlStr = htmlStr + '<div class="col-2">' + result.ourItemNumber + '</div>';
                    htmlStr = htmlStr + '<div class="col-1">' + result.ourItemUnit + '</div>';
                    htmlStr = htmlStr + '<div class="col-2  myright">' + result.ourCostPrice + '</div>';
                    htmlStr = htmlStr + '<div class="col-2 linetotalamount  myright">' + result.lineTotalAmount + '</div>';
                    htmlStr = htmlStr + '<div class="col-1 show-quantity-sold">' + '<i style="color : #17a2b8;" class="fa fa-envelope-open fa-fw"></i>' + '<i style="color : #17a2b8;" class="fa fa-trash fa-fw removebudgetline"></i>' + '</div>';
                    htmlStr = htmlStr + '<input type="text" hidden name="periodeDivId" value="' + result.periodLineId + '" />';
                    htmlStr = htmlStr + '<input type="text" hidden name="stockItemId" value="' + result.stockItemId + '" />';
                    htmlStr = htmlStr + '<div class="quantitysolddiv" style="display:none">';
                    htmlStr = htmlStr + '<input type="text" name="quantitySold" readonly value="' + result.quantitySold + '" />';
                    htmlStr = htmlStr + '</div>';
                    htmlStr = htmlStr + '</div>';

                    var newBudgetLine = document.createElement("div");
                    newBudgetLine.innerHTML = htmlStr;

                    var periodeDiv = document.getElementById(result.periodLineId);

                    //var targetCol = periodeDiv.firstElementChild;
                    var targetCols = periodeDiv.getElementsByClassName("budgetlinescontainer");

                    targetCols[0].appendChild(newBudgetLine);

                },

                error: function (request, status, error) {
                    var jsonErrorObj = request.responseJSON
                    var errorText = jsonErrorObj.Detail;
                    var errorTitle = jsonErrorObj.Title;
                    var errorInstance = jsonErrorObj.Instance;
                    location.href = "/home/ShowErrorForJSON?errorinstance=" + errorInstance;
                }
            });
        }

        function createBudgetLineFromBudgetLine(sourceBudgetLineId, periodLineId) {

            $.ajax({
                type: "POST",
                url: "/purchaseorder/CreateBudgetLineFromBudgetLine",
                data: {
                    id: sourceBudgetLineId,
                    periodLineId: periodLineId,
                    purchaseBudgetId: $('#PurchaseBudgetId').val()
                },
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                dataType: "json",
                success: function (result) {
                    var htmlStr;

                    htmlStr = '<div class="row budgetitemline" id="' + result.id + '" draggable="true" ondragstart="dragPeriodLine(event)">';
                    htmlStr = htmlStr + ' <div class="col-2 myright"><input type="text" name="Quantity" class="periodline-input-field" value="' + result.quantityToOrder + '" /></div>';
                    htmlStr = htmlStr + '<div class="col-2">' + result.ourItemName + '</div>';
                    htmlStr = htmlStr + '<div class="col-2">' + result.ourItemNumber + '</div>';
                    htmlStr = htmlStr + '<div class="col-1">' + result.ourItemUnit + '</div>';
                    htmlStr = htmlStr + '<div class="col-2 myright">' + result.ourCostPrice + '</div>';
                    htmlStr = htmlStr + '<div class="col-2 linetotalamount myright">' + result.lineTotalAmount + '</div>';
                    htmlStr = htmlStr + '<div class="col-1 show-quantity-sold">' + '<i style="color : #17a2b8;" class="fa fa-envelope-open fa-fw"></i>' + '<i style="color : #17a2b8;" class="fa fa-trash fa-fw removebudgetline"></i>' + '</div>';
                    htmlStr = htmlStr + '<input type="text" hidden name="periodeDivId" value="' + result.periodLineId + '" />';
                    htmlStr = htmlStr + '<input type="text" hidden name="stockItemId" value="' + result.stockItemId + '" />';
                    htmlStr = htmlStr + '<div class="quantitysolddiv" style="display:none">';
                    htmlStr = htmlStr + '<input type="text" name="quantitySold" readonly value="' + result.quantitySold + '" />';
                    htmlStr = htmlStr + '</div>';
                    htmlStr = htmlStr + '</div>';

                    var newBudgetLine = document.createElement("div");
                    newBudgetLine.innerHTML = htmlStr;

                    var periodeDiv = document.getElementById(result.periodLineId);

                    var targetCols = periodeDiv.getElementsByClassName("budgetlinescontainer");

                    targetCols[0].appendChild(newBudgetLine);
                },

                error: function (request, status, error) {
                    var jsonErrorObj = request.responseJSON
                    var errorText = jsonErrorObj.Detail;
                    var errorTitle = jsonErrorObj.Title;
                    var errorInstance = jsonErrorObj.Instance;
                    location.href = "/home/ShowErrorForJSON?errorinstance=" + errorInstance;
                }
            });
            }

            function deleteBudgetLine(budgetLineId) {

                $.ajax({
                    type: "POST",
                    url: "/purchaseorder/deleteBudgetLine",
                    data: {
                        id: budgetLineId,
                        purchaseBudgetId: $('#PurchaseBudgetId').val()
                    },
                    contentType: "application/x-www-form-urlencoded; charset=utf-8",
                    dataType: "json",
                    success: function (result) {

                        $("#searchForm").submit();
                        //var budgetLineDiv = document.getElementById(result.id);

                        //budgetLineDiv.remove();
                    },

                    error: function (request, status, error) {
                        var jsonErrorObj = request.responseJSON
                        var errorText = jsonErrorObj.Detail;
                        var errorTitle = jsonErrorObj.Title;
                        var errorInstance = jsonErrorObj.Instance;
                        location.href = "/home/ShowErrorForJSON?errorinstance=" + errorInstance;
                    }
                });
            }

        function updateBudgetLineQuantity(budgetLineId, Quantity) {

            $.ajax({
                type: "POST",
                url: "/purchaseorder/updateBudgetLineQuantity",
                data: {
                    id: budgetLineId,
                    quantityToOrder: Quantity,
                    purchaseBudgetId: $('#PurchaseBudgetId').val()
                },
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                dataType: "json",
                success: function (result) {

                   // class = linetotalamount

                    var budgetLineDiv = document.getElementById(result.id);

                    var lineTotalAmountDiv = budgetLineDiv.getElementsByClassName("linetotalamount");

                    lineTotalAmountDiv[0].innerText = result.lineTotalAmount;


                },

                error: function (request, status, error) {
                    var jsonErrorObj = request.responseJSON
                    var errorText = jsonErrorObj.Detail;
                    var errorTitle = jsonErrorObj.Title;
                    var errorInstance = jsonErrorObj.Instance;
                    location.href = "/home/ShowErrorForJSON?errorinstance=" + errorInstance;
                }
            });
        }

        function updateBudgetLinePeriod(budgetLineId, newPeriodLineId) {

            $.ajax({
                type: "POST",
                url: "/purchaseorder/updateBudgetLinePeriod",
                data: {
                    id: budgetLineId,
                    periodLineId: newPeriodLineId,
                    purchaseBudgetId: $('#PurchaseBudgetId').val()
                },
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                dataType: "json",
                success: function (result) {

                    var sourceBudgetLineDiv = document.getElementById(result.id);
                    sourceBudgetLineDiv.remove();

                    var htmlStr;

                    htmlStr = '<div class="row budgetitemline" id="' + result.id + '" draggable="true" ondragstart="dragPeriodLine(event)">';
                    htmlStr = htmlStr + ' <div class="col-2 myright"><input type="text" name="Quantity" class="periodline-input-field" value="' + result.quantityToOrder + '" /></div>';
                    htmlStr = htmlStr + '<div class="col-2">' + result.ourItemName + '</div>';
                    htmlStr = htmlStr + '<div class="col-2">' + result.ourItemNumber + '</div>';
                    htmlStr = htmlStr + '<div class="col-1">' + result.ourItemUnit + '</div>';
                    htmlStr = htmlStr + '<div class="col-2 myright">' + result.ourCostPrice + '</div>';
                    htmlStr = htmlStr + '<div class="col-2 linetotalamount myright">' + result.lineTotalAmount + '</div>';
                    htmlStr = htmlStr + '<div class="col-1 show-quantity-sold">' + '<i style="color : #17a2b8;" class="fa fa-envelope-open fa-fw"></i>' + '<i style="color : #17a2b8;" class="fa fa-trash fa-fw removebudgetline"></i>' + '</div>';
                    htmlStr = htmlStr + '<input type="text" hidden name="periodeDivId" value="' + result.periodLineId + '" />';
                    htmlStr = htmlStr + '<input type="text" hidden name="stockItemId" value="' + result.stockItemId + '" />';
                    htmlStr = htmlStr + '<div class="quantitysolddiv" style="display:none">';
                    htmlStr = htmlStr + '<input type="text" name="quantitySold" readonly value="' + result.quantitySold + '" />';
                    htmlStr = htmlStr + '</div>';
                    htmlStr = htmlStr + '</div>';

                    var newBudgetLine = document.createElement("div");
                    newBudgetLine.innerHTML = htmlStr;

                    var periodeDiv = document.getElementById(result.periodLineId);

                    var targetCols = periodeDiv.getElementsByClassName("budgetlinescontainer");

                    targetCols[0].appendChild(newBudgetLine);

                },

                error: function (request, status, error) {
                    var jsonErrorObj = request.responseJSON
                    var errorText = jsonErrorObj.Detail;
                    var errorTitle = jsonErrorObj.Title;
                    var errorInstance = jsonErrorObj.Instance;
                    location.href = "/home/ShowErrorForJSON?errorinstance=" + errorInstance;
                }
            });
        }


    </script>
}
