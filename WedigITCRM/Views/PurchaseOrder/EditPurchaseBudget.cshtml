@model PurchaseBudgetEditViewModel

<div class="formcontainer">
    <div class="tableheadline">
        Indkøbsbudget
    </div>

    <div class="row">
        <div class="col-12">
            <form id="searchForm" asp-controller="PurchaseOrder" asp-action="EditPurchaseBudget" method="get">
                <input asp-for="@Model.PurchaseBudgetId" hidden id="PurchaseBudgetId" />
                <div class="form-row">
                    <div class="col-2">
                        <div class="input-select-room-for-icon">
                            <label asp-for="@Model.SearchByStockItemName">Vare</label>
                            <input asp-for="@Model.SearchByStockItemName" id="searchbyitemname" />
                        </div>
                        <div class="icon-beside-input-select">
                            <i id="resetsearchbyitemname" class="fa fa-times"></i>
                        </div>
                    </div>
                    <div class="col-2">
                        <div class="input-select-room-for-icon">
                            <label asp-for="@Model.SearchByStockItemNumber">Varenummer</label>
                            <input asp-for="@Model.SearchByStockItemNumber" id="searchbyitemnumber" />
                        </div>
                        <div class="icon-beside-input-select">
                            <i id="resetsearchbyitemnumber" class="fa fa-times"></i>
                        </div>
                    </div>
                    <div class="col-2">
                        <div class="input-select-room-for-icon">
                            <label asp-for="@Model.VendorId">Leverandør</label>
                            <select asp-for="@Model.VendorId" asp-items="@Model.SearchByVendor" id="searchbyvendor" class="custom-select"></select>
                        </div>
                        <div class="icon-beside-input-select">
                            <i id="resetsearchbyvendor" class="fa fa-times"></i>
                        </div>
                    </div>
                    <div class="col-2">
                        <div class="input-select-room-for-icon">
                            <label asp-for="@Model.category1Id">Kategori 1</label>
                            <select asp-for="@Model.category1Id" asp-items="@Model.SearchByCategory1" id="searchbycategory1" class="custom-select"></select>
                        </div>
                        <div class="icon-beside-input-select">
                            <i id="resetsearchbycategory1" class="fa fa-times"></i>
                        </div>
                    </div>
                    <div class="col-2">
                        <div class="input-select-room-for-icon">
                            <label asp-for="@Model.category2Id">Kategori 2</label>
                            <select asp-for="@Model.category2Id" asp-items="@Model.SearchByCategory2" id="searchbycategory2" class="custom-select"></select>
                        </div>
                        <div class="icon-beside-input-select">
                            <i id="resetsearchbycategory2" class="fa fa-times"></i>
                        </div>
                    </div>
                    <div class="col-2">
                        <div class="input-select-room-for-icon">
                            <label asp-for="@Model.category3Id">Kategori 3</label>
                            <select asp-for="@Model.category3Id" asp-items="@Model.SearchByCategory3" id="searchbycategory3" class="custom-select"></select>
                        </div>
                        <div class="icon-beside-input-select">
                            <i id="resetsearchbycategory3" class="fa fa-times"></i>
                        </div>
                    </div>
                </div>
                <br />
                <br />
            </form>
        </div>
    </div>

    

    <div class="row">
        <div class="col-4">
            @if (Model != null)
            {
                @foreach (var stockItem in Model.StockItems)
                {
                    <div class="rowcontainer">
                        <div class="row itemline" id="@stockItem.Id" draggable="true" ondragstart="dragStockItemLine(event)">
                            <div class="col-3">@stockItem.ItemName</div>
                            <div class="col-3">@stockItem.ItemNumber</div>
                            <div class="col-3">@stockItem.Unit</div>
                        </div>
                    </div>
                }
            }
        </div>
        <div class="col-2">

        </div>

        <div class="col-6">


            @if (Model != null)
            {
                @foreach (var periodLine in Model.PeriodLines)
                {
                    <div>@periodLine.HeadLine</div>
                    <div id="@periodLine.Id" class="row periodcontainer" ondrop="drop(event)" ondragover="allowDrop(event)">
                        Træk hertil
                        <div style="height : 100px" class="col-12">

                        </div>
                    </div>
                }
            }

        </div>
    </div>
</div>



@section Scripts {
    <script>
        $(document).ready(function () {


            var budgetLines = @Html.Raw(Json.Serialize(Model.BudgetLines.ToArray()));
            for (var i = 0; i < budgetLines.length; i++) {


                var htmlStr;

                htmlStr = '<div class="row budgetitemline" id="' + budgetLines[i].id + '" draggable="true" ondragstart="dragPeriodLine(event)">';
                htmlStr = htmlStr + ' <div class="col-3"><label>Antal</label><input type="text" name="Quantity" class="periodline-input-field" value="' + budgetLines[i].quantityToOrder + '" /></div>';
                htmlStr = htmlStr + '<div class="col-3">' + budgetLines[i].ourItemName + '</div>';
                htmlStr = htmlStr + '<div class="col-3">' + budgetLines[i].ourItemNumber + '</div>';
                htmlStr = htmlStr + '<div class="col-3">' + budgetLines[i].ourItemUnit + '</div>';
                htmlStr = htmlStr + '<input type="text" hidden name="periodeDivId" value="' + budgetLines[i].periodLineId + '" />';
                htmlStr = htmlStr + '<input type="text" hidden name="stockItemId" value="' + budgetLines[i].stockItemId + '" />';
                htmlStr = htmlStr + '<input type="text" hidden name="quantitySold" value="' + budgetLines[i].quantitySold + '" />';
                htmlStr = htmlStr + '</div>';

                var newDivNode = document.createElement("div");
                newDivNode.innerHTML = htmlStr;

                var periodeDiv = document.getElementById(budgetLines[i].periodLineId);

                var targetCol = periodeDiv.firstElementChild;
                targetCol.appendChild(newDivNode);
            }

            $(document).on('change', '.periodline-input-field', function () {
                var quantity = $(this).val();
                var budgetLineId = $(this).parent().parent().attr("id");

                updateBudgetLineQuantity(budgetLineId, quantity);
            });


            $('#searchbyitemname').bind('change', function () {
                $("#searchForm").submit();
            });

            $('#searchbyitemnumber').bind('change', function () {
                $("#searchForm").submit();
            });

            $('#searchbyvendor').bind('change', function () {
                $("#searchForm").submit();
            });

            $('#searchbycategory1').bind('change', function () {
                $("#searchForm").submit();
            });

            $('#searchbycategory2').bind('change', function () {
                $("#searchForm").submit();
            });

            $('#searchbycategory3').bind('change', function () {
                $("#searchForm").submit();
            });

            $(document).on("click", ".fa-times", function (event) {
                var resetFieldId = $(this).attr("id");
                switch (resetFieldId) {
                    case "resetsearchbyitemname":
                        $('#searchbyitemname').val("");
                        break;
                    case "resetsearchbyitemnumber":
                        $('#searchbyitemnumber').val("");
                        break;
                    case "resetsearchbyvendor":
                        $('#searchbyvendor').val("0");
                        break;
                    case "resetsearchbycategory1":
                        $('#searchbycategory1').val("");
                        break;
                    case "resetsearchbycategory2":
                        $('#searchbycategory2').val("");
                        break;
                    case "resetsearchbycategory3":
                        $('#searchbycategory3').val("");
                        break;
                }
                $("#searchForm").submit();
                event.stopImmediatePropagation()
            });


        });


        function allowDrop(ev) {
            ev.preventDefault();
        }

        function dragStockItemLine(ev) {
            ev.dataTransfer.setData("text", ev.target.id + "|" + "1");
        }

        function dragPeriodLine(ev) {
            ev.dataTransfer.setData("text", ev.target.id + "|" + "0");
        }

        function drop(ev) {

            if (!ev.target.classList.contains("periodcontainer")) {
                return;
            }

            ev.preventDefault();

            var data = ev.dataTransfer.getData("text");
            var dataArray = data.split("|");



            if (dataArray[1] == "1") {   // drag and  drop a item line to budget line.

                var stockItemId = dataArray[0];
                var periodLineId = ev.target.getAttribute("id");

                createBudgetLineFromItemLine(stockItemId, periodLineId);
            }

            if (dataArray[1] == "0") {  // drag and  drop a budget line line to new budget line.
                if (ev.ctrlKey) {
                    var sourceBudgetLineId = dataArray[0];
                    var periodLineId = ev.target.getAttribute("id");

                    createBudgetLineFromBudgetLineFromItemLine(sourceBudgetLineId, periodLineId);
                    return;
                }
                else {  // drag and  drop a budget line i.e move

                    var sourceBudgetLineId = dataArray[0];
                    var sourceBudgetLineDiv = document.getElementById(sourceBudgetLineId);

                    var newBudgetLineDiv = sourceBudgetLineDiv.cloneNode(true);

                    sourceBudgetLineDiv.remove();

                    var childDivs = newBudgetLineDiv.getElementsByTagName('input');

                    var sourceQuantity;
                    var sourceperiodeDivId;
                    var sourcestockItemId;
                   
                    for (i = 0; i < childDivs.length; i++) {
                        var inputField = childDivs[i];

                        if (inputField.name == "periodeDivId") {
                            sourceperiodeDivId = inputField.value;
                        }

                        if (inputField.name == "Quantity") {
                            sourceQuantity = inputField.value;
                        }

                        if (inputField.name == "stockItemId") {
                            sourcestockItemId = inputField.value;
                        }
                    }

                    while (childDivs.length > 0) {
                        var inputField = childDivs[0];
                        inputField.remove();
                    }

                    var childDivs = newBudgetLineDiv.getElementsByTagName('label');
                    var labelNode = childDivs[0];
                    var parentRow = labelNode.parentNode;
                    parentRow.remove();

                    newBudgetLineDiv.innerHTML = ' <div class="col-3"><label>Antal</label><input type="text" name="Quantity" class="periodline-input-field" value="' + sourceQuantity + '"/></div>' + newBudgetLineDiv.innerHTML;
                    newBudgetLineDiv.innerHTML = newBudgetLineDiv.innerHTML + '<input type="text" hidden name="periodeDivId" value="' + ev.target.getAttribute("id") + '" />';
                    newBudgetLineDiv.innerHTML = newBudgetLineDiv.innerHTML + '<input type="text" hidden name="stockItemId" value="' + sourcestockItemId + '" />';
                    newBudgetLineDiv.innerHTML = newBudgetLineDiv.innerHTML + '<input type="text" hidden name="quantitySold" />';

                    var targetCol = ev.target.firstElementChild;
                    targetCol.appendChild(newBudgetLineDiv);

                    var periodLineId = ev.target.getAttribute("id")
                    updateBudgetLinePeriod(sourceBudgetLineId, periodLineId)
                }
            }
        }

        function createBudgetLineFromItemLine(stockItemId, periodLineId) {

            $.ajax({
                type: "POST",
                url: "/purchaseorder/createBudgetLineFromItemLine",
                data: {
                    stockItemId: stockItemId,
                    periodLineId: periodLineId,
                    purchaseBudgetId: $('#PurchaseBudgetId').val()
                },
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                dataType: "json",
                success: function (result) {

                    var periodLine = document.getElementById(result.periodLineId);
                    var sourceDiv = document.getElementById(result.stockItemId);

                    sourceDiv.removeAttribute("ondragstart");
                    sourceDiv.setAttribute("ondragstart", "dragPeriodLine(event)")

                    sourceDiv.removeAttribute("id");
                    sourceDiv.setAttribute("id", result.id);

                    sourceDiv.classList.remove("itemline");
                    sourceDiv.classList.add("budgetitemline");

                    sourceDiv.innerHTML = ' <div class="col-3"><label>Antal</label><input type="text" name="Quantity" class="periodline-input-field" /></div>' + sourceDiv.innerHTML;
                    sourceDiv.innerHTML = sourceDiv.innerHTML + '<input type="text" hidden name="periodeDivId" value="' + result.periodLineId + '" />';
                    sourceDiv.innerHTML = sourceDiv.innerHTML + '<input type="text" hidden name="stockItemId" value="' + result.stockItemId + '" />';
                    sourceDiv.innerHTML = sourceDiv.innerHTML + '<input type="text" hidden name="quantitySold" value="' + result.quantitySold + '" />';

                    var targetCol = periodLine.firstElementChild;
                    targetCol.append(sourceDiv);
                },

                error: function (request, status, error) {
                    var jsonErrorObj = request.responseJSON
                    var errorText = jsonErrorObj.Detail;
                    var errorTitle = jsonErrorObj.Title;
                    var errorInstance = jsonErrorObj.Instance;
                    location.href = "/home/ShowErrorForJSON?errorinstance=" + errorInstance;
                }
            });
        }

        function createBudgetLineFromBudgetLineFromItemLine(sourceBudgetLineId, periodLineId) {

            $.ajax({
                type: "POST",
                url: "/purchaseorder/CreateBudgetLineFromBudgetLine",
                data: {
                    id: sourceBudgetLineId,
                    periodLineId: periodLineId,
                    purchaseBudgetId: $('#PurchaseBudgetId').val()
                },
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                dataType: "json",
                success: function (result) {

                    var periodLine = document.getElementById(result.periodLineId);
                    var htmlStr;

                    htmlStr = '<div class="row budgetitemline" id="' + result.id + '" draggable="true" ondragstart="dragPeriodLine(event)">';
                    htmlStr = htmlStr + ' <div class="col-3"><label>Antal</label><input type="text" name="Quantity" class="periodline-input-field" value="' + result.quantityToOrder + '" /></div>' ;
                    htmlStr = htmlStr + '<div class="col-3">' + result.ourItemName + '</div>';
                    htmlStr = htmlStr + '<div class="col-3">' + result.ourItemNumber + '</div>';
                    htmlStr = htmlStr + '<div class="col-3">' + result.ourItemUnit + '</div>';
                    htmlStr = htmlStr + '<input type="text" hidden name="periodeDivId" value="' + result.periodLineId + '" />';
                    htmlStr = htmlStr + '<input type="text" hidden name="stockItemId" value="' + result.stockItemId + '" />';
                    htmlStr = htmlStr + '<input type="text" hidden name="quantitySold" value="' + result.quantitySold + '" />';
                    htmlStr = htmlStr + '</div>';

                    var newDivNode = document.createElement("div");
                    newDivNode.innerHTML = htmlStr;

                    var targetCol = periodLine.firstElementChild;
                    targetCol.append(newDivNode);
                },

                error: function (request, status, error) {
                    var jsonErrorObj = request.responseJSON
                    var errorText = jsonErrorObj.Detail;
                    var errorTitle = jsonErrorObj.Title;
                    var errorInstance = jsonErrorObj.Instance;
                    location.href = "/home/ShowErrorForJSON?errorinstance=" + errorInstance;
                }
            });
        }

        function updateBudgetLineQuantity(budgetLineId, Quantity) {

            $.ajax({
                type: "POST",
                url: "/purchaseorder/updateBudgetLineQuantity",
                data: {
                    id: budgetLineId,
                    quantityToOrder: Quantity,
                    purchaseBudgetId: $('#PurchaseBudgetId').val()
                },
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                dataType: "json",
                success: function (result) {

                   
                },

                error: function (request, status, error) {
                    var jsonErrorObj = request.responseJSON
                    var errorText = jsonErrorObj.Detail;
                    var errorTitle = jsonErrorObj.Title;
                    var errorInstance = jsonErrorObj.Instance;
                    location.href = "/home/ShowErrorForJSON?errorinstance=" + errorInstance;
                }
            });
        }

        function updateBudgetLinePeriod(budgetLineId, periodLineId) {

            $.ajax({
                type: "POST",
                url: "/purchaseorder/updateBudgetLinePeriod",
                data: {
                    id: budgetLineId,
                    periodLineId: periodLineId,
                    purchaseBudgetId: $('#PurchaseBudgetId').val()
                },
                contentType: "application/x-www-form-urlencoded; charset=utf-8",
                dataType: "json",
                success: function (result) {

                    var budgetLineDiv = document.getElementById(result.id);
                    var childDivs = budgetLineDiv.getElementsByTagName('input');

                    for (i = 0; i < childDivs.length; i++) {
                        var inputField = childDivs[i];

                        if (inputField.name == "quantitySold") {
                            inputField.value = result.quantitySold
                        }                       
                    }
                },

                error: function (request, status, error) {
                    var jsonErrorObj = request.responseJSON
                    var errorText = jsonErrorObj.Detail;
                    var errorTitle = jsonErrorObj.Title;
                    var errorInstance = jsonErrorObj.Instance;
                    location.href = "/home/ShowErrorForJSON?errorinstance=" + errorInstance;
                }
            });
        }


    </script>
}
